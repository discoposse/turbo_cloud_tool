// Code generated by MockGen. DO NOT EDIT.
// Source: azure.go

// Package mock_clouds is a generated GoMock package.
package mock_clouds

import (
	context "context"
	reflect "reflect"

	subscriptions "github.com/Azure/azure-sdk-for-go/profiles/latest/resources/mgmt/subscriptions"
	adal "github.com/Azure/go-autorest/autorest/adal"
	gomock "github.com/golang/mock/gomock"
)

// MockTenantsClient is a mock of TenantsClient interface
type MockTenantsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTenantsClientMockRecorder
}

// MockTenantsClientMockRecorder is the mock recorder for MockTenantsClient
type MockTenantsClientMockRecorder struct {
	mock *MockTenantsClient
}

// NewMockTenantsClient creates a new mock instance
func NewMockTenantsClient(ctrl *gomock.Controller) *MockTenantsClient {
	mock := &MockTenantsClient{ctrl: ctrl}
	mock.recorder = &MockTenantsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTenantsClient) EXPECT() *MockTenantsClientMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockTenantsClient) List(arg0 context.Context) (subscriptions.TenantListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(subscriptions.TenantListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTenantsClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTenantsClient)(nil).List), arg0)
}

// MockDeviceFlowConfig is a mock of DeviceFlowConfig interface
type MockDeviceFlowConfig struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceFlowConfigMockRecorder
}

// MockDeviceFlowConfigMockRecorder is the mock recorder for MockDeviceFlowConfig
type MockDeviceFlowConfigMockRecorder struct {
	mock *MockDeviceFlowConfig
}

// NewMockDeviceFlowConfig creates a new mock instance
func NewMockDeviceFlowConfig(ctrl *gomock.Controller) *MockDeviceFlowConfig {
	mock := &MockDeviceFlowConfig{ctrl: ctrl}
	mock.recorder = &MockDeviceFlowConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceFlowConfig) EXPECT() *MockDeviceFlowConfigMockRecorder {
	return m.recorder
}

// ServicePrincipalToken mocks base method
func (m *MockDeviceFlowConfig) ServicePrincipalToken() (*adal.ServicePrincipalToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePrincipalToken")
	ret0, _ := ret[0].(*adal.ServicePrincipalToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePrincipalToken indicates an expected call of ServicePrincipalToken
func (mr *MockDeviceFlowConfigMockRecorder) ServicePrincipalToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePrincipalToken", reflect.TypeOf((*MockDeviceFlowConfig)(nil).ServicePrincipalToken))
}
